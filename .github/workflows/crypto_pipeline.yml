name: Daily Crypto Pipeline

on:
  schedule:
    - cron: '0 6 * * *'
  workflow_dispatch:

jobs:
  run-pipeline:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.0'

      - name: Install dependencies
        run: pip install -r requirements.txt
        
      - name: Install NLTK
        run: |
          pip install nltk
          python -c "import nltk, os; path=os.path.join(os.getcwd(), 'nltk_data'); nltk.download('punkt', download_dir=path); nltk.download('stopwords', download_dir=path); nltk.download('wordnet', download_dir=path)"

      - name: Set NLTK_DATA environment variable
        run: echo "NLTK_DATA=/usr/local/share/nltk_data" >> $GITHUB_ENV

      - name: Start MLflow model server
        run: |
          nohup mlflow models serve -m spam_model -p 5002 --no-conda --host 0.0.0.0 > mlflow.log 2>&1 &


      - name: Install ngrok
        run: |
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install ngrok

      - name: Authenticate ngrok
        run: ngrok config add-authtoken ${{ secrets.NGROK_AUTHTOKEN }}

      - name: Start ngrok and expose MLflow API
        run: |
          # Start ngrok in the background and expose your local model API (port 5002)
          nohup ngrok http 5002 &

          # Wait for ngrok to initialize and ensure the public URL is ready
          echo "Waiting for ngrok to initialize..."
          for i in {1..10}; do
            PUBLIC_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')
            echo "PUBLIC_URL=$PUBLIC_URL" >> $GITHUB_ENV
            if [[ "$PUBLIC_URL" != "null" && -n "$PUBLIC_URL" ]]; then
              echo "Public URL is ready: $PUBLIC_URL"
              break
            fi
            sleep 3
          done

          if [[ -z "$PUBLIC_URL" ]]; then
            echo "ngrok failed to provide a public URL."
            exit 1
          fi

          # Debugging: Print the PUBLIC_URL
          echo "Final PUBLIC_URL: $PUBLIC_URL"

      - name: Set API URL environment variable
        run: |
          echo "API_SENTIMENT_MODEL=${{ env.PUBLIC_URL }}/invocations" >> $GITHUB_ENV



      - name: Run get_news_sentences.py
        run: python get_news_sentences.py
        env:
          API_SENTIMENT_MODEL: ${{ env.API_SENTIMENT_MODEL }}

      - name: Preprocess sentiments
        run: python clean_headline_sentiment.py

      - name: Combine final dataset
        run: python generate_csv.py

      - name: Predict tomorrow's price
        run: python price_model.py
      
      - name: Upload prediction result
        uses: actions/upload-artifact@v4
        with:
          name: prediction_result
          path: prediction_result.txt

# 2vjKe8gcVkpxr6d6NW2uVeQm5VJ_4yWBF6Qu2MMLi2UarA4wT : 5002
# 2wFydqD901sz9dzcxcfpfxocQvD_58Ex39kxnNgMR7gWiV8jL : 5001
