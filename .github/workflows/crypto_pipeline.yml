name: Daily Crypto Pipeline

on:
  schedule:
    - cron: '0 12 * * *'
  workflow_dispatch:

permissions:
  contents: write


jobs:
  run-pipeline:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.0'
      
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
      
      - name: Configure Poetry path
        run: echo "${HOME}/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies with Poetry
        run: poetry install --no-root
      
      - name: Check if market is open
        run: poetry run python check_if_market_open.py
      
      - name: Install NLTK
        run: poetry run pip install nltk
        
      - name: Download NLTK data
        run: |
          poetry run python -c "import nltk, os; path=os.path.join(os.getcwd(), 'nltk_data'); nltk.download('punkt', download_dir=path); nltk.download('stopwords', download_dir=path); nltk.download('wordnet', download_dir=path)"

      - name: Set NLTK_DATA environment variable
        run: echo "NLTK_DATA=/usr/local/share/nltk_data" >> $GITHUB_ENV

      - name: Start MLflow model server on port 5003
        run: |
          nohup poetry run mlflow server --host 0.0.0.0 --port 5003 &> mlflow.log &
      
      - name: Deploy Model on port 5002
        run: |
          poetry run python deploy_model.py

      - name: Install ngrok
        run: |
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install ngrok

      - name: Create ngrok config file
        run: |
          mkdir -p ~/.ngrok2
          cat <<EOF > ~/.ngrok2/ngrok.yml
          authtoken: ${{ secrets.NGROK_AUTHTOKEN }}
          version: "2"
          tunnels:
            model_api:
              addr: 5002
              proto: http
            mlflow_ui:
              addr: 5003
              proto: http
          web_addr: 127.0.0.1:4040
          EOF

      - name: Authenticate ngrok
        run: ngrok config add-authtoken ${{ secrets.NGROK_AUTHTOKEN }}
      
      - name: Start ngrok with multiple tunnels
        run: |
          nohup ngrok start --all > ngrok.log &

      - name: Get public URLs from ngrok
        run: |
          echo "Waiting for ngrok to initialize..."
          for i in {1..10}; do
            RESPONSE=$(curl -s http://127.0.0.1:4040/api/tunnels)
            MODEL_URL=$(echo "$RESPONSE" | jq -r '.tunnels[] | select(.name=="model_api") | .public_url')
            MLFLOW_URL=$(echo "$RESPONSE" | jq -r '.tunnels[] | select(.name=="mlflow_ui") | .public_url')

            if [[ -n "$MODEL_URL" && "$MODEL_URL" != "null" && -n "$MLFLOW_URL" && "$MLFLOW_URL" != "null" ]]; then
              echo "Model URL: $MODEL_URL"
              echo "MLflow URL: $MLFLOW_URL"
              echo "API_SENTIMENT_MODEL=$MODEL_URL/invocations" >> $GITHUB_ENV
              echo "MLFLOW_NGROK=$MLFLOW_URL" >> $GITHUB_ENV
              break
            fi
            sleep 3
          done

          echo "Final Model URL: $MODEL_URL"
          echo "Final MLflow URL: $MLFLOW_URL"

      - name: Set API URL environment variable
        run: |
          echo "API_SENTIMENT_MODEL=${{ env.API_SENTIMENT_MODEL }}" >> $GITHUB_ENV
          echo "MLFLOW_NGROK=${{ env.MLFLOW_NGROK }}" >> $GITHUB_ENV

      - name: Run daily_run.py
        run: poetry run python daily_run.py
        env:
          API_SENTIMENT_MODEL: ${{ env.API_SENTIMENT_MODEL }}
      
      - name: Predict tomorrow's price
        run: poetry run python predictions.py
        env:
          MLFLOW_NGROK: ${{ env.MLFLOW_NGROK }}
      
      - name: Commit and push updated CSVs
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add stock_csvs/*.csv
          git add predictions.txt
          git commit -m "Daily CSV & predictions.txt update on $(date '+%Y-%m-%d')" || echo "No changes to commit"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# 2vjKe8gcVkpxr6d6NW2uVeQm5VJ_4yWBF6Qu2MMLi2UarA4wT : 5002
# 2wFydqD901sz9dzcxcfpfxocQvD_58Ex39kxnNgMR7gWiV8jL : 5001
