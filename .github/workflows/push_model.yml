name: Download Build and Push Docker Image

on:
  push:
    branches:
      - production

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.0'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Start MLflow model server on port 5001
        run: |
          nohup mlflow server --host 0.0.0.0 --port 5001 &> mlflow.log &
      
      - name: Install ngrok
        run: |
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install ngrok
      
      - name: Authenticate ngrok
        run: ngrok config add-authtoken ${{ secrets.NGROK_AUTHTOKEN_GMAIL }}
      
      - name: Start ngrok on 5001
        run: |
          nohup ngrok http 5001 > ngrok.log &
      
      - name: Get public URLs from ngrok
        run: |
          echo "Waiting for ngrok to initialize..."
          for i in {1..10}; do
            RESPONSE=$(curl -s http://127.0.0.1:4040/api/tunnels)
            MLFLOW_URL=$(echo "$RESPONSE" | jq -r '.tunnels[] | select(.proto=="https") | .public_url' | head -n 1)
            if [[ -n "$MLFLOW_URL" && "$MLFLOW_URL" != "null" ]]; then
              echo "MLflow URL: $MLFLOW_URL"
              echo "MLFLOW_NGROK=$MLFLOW_URL" >> $GITHUB_ENV
              break
            fi
            sleep 3
          done

          echo "Final MLflow URL: $MLFLOW_URL"
      
      - name: Set MLFLOW_NGROK environment variable
        run: |
          echo "MLFLOW_NGROK=${{ env.MLFLOW_NGROK }}" >> $GITHUB_ENV


      - name: Download MLflow model
        run: |
          python download_model.py
        env:
          MLFLOW_NGROK: ${{ env.MLFLOW_NGROK }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/crypto_sentiment_model:latest .

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/crypto_sentiment_model:latest